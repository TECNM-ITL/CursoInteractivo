[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://4fcr5gm45mdf"]

[sub_resource type="Shader" id="Shader_4xxsw"]
code = "shader_type canvas_item;

void fragment()
{
	vec2 resolution = 1.0 / SCREEN_PIXEL_SIZE;
	float effectDensity = 4.0;
    float effectScale = 0.3;
    float scaledTime = TIME * 0.0025;
    
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = UV;
    
    // scale y to the aspect ratio
    uv.y *= resolution.y / resolution.x;
    
    // effect density/repeat
    uv = uv * effectDensity;
   
    for(float k = 1.0; k < 8.0; k += 1.0){
        uv.x += effectScale * sin(uv.y * k + scaledTime) - scaledTime * k * 10.0;
        uv.y += effectScale * cos(uv.x * k + scaledTime) - sin(scaledTime * k);
    }
    
    // Time varying pixel color
    vec3 col = 0.5 + 0.5*sin(TIME+uv.xyx+vec3(0,2,4));

    // Output to screen
    COLOR = vec4(col,0.5);
}
"

[resource]
shader = SubResource("Shader_4xxsw")
